{"version":3,"file":"apollo-upload-server.js","sources":["../src/index.js"],"sourcesContent":["import mkdirp from 'mkdirp'\nimport formidable from 'formidable'\nimport objectPath from 'object-path'\n\nexport function processRequest(request, { uploadDir } = {}) {\n  // Ensure provided upload directory exists\n  if (uploadDir) mkdirp.sync(uploadDir)\n\n  const form = formidable.IncomingForm({\n    // Defaults to the OS temp directory\n    uploadDir\n  })\n\n  // Parse the multipart form request\n  return new Promise((resolve, reject) => {\n    form.parse(request, (error, { operations }, files) => {\n      if (error) reject(new Error(error))\n\n      // Decode the GraphQL operation(s). This is an array if batching is\n      // enabled.\n      operations = JSON.parse(operations)\n\n      // Check if files were uploaded\n      if (Object.keys(files).length) {\n        // File field names contain the original path to the File object in the\n        // GraphQL operation input variables. Relevent data for each uploaded\n        // file now gets placed back in the variables.\n        const operationsPath = objectPath(operations)\n        Object.keys(files).forEach(variablesPath => {\n          const { name, type, size, path } = files[variablesPath]\n          operationsPath.set(variablesPath, { name, type, size, path })\n        })\n      }\n\n      // Provide fields for replacement request body\n      resolve(operations)\n    })\n  })\n}\n\nexport function apolloUploadKoa(options) {\n  return async function(ctx, next) {\n    // Skip if there are no uploads\n    if (ctx.request.is('multipart/form-data'))\n      ctx.request.body = await processRequest(ctx.req, options)\n    await next()\n  }\n}\n\nexport function apolloUploadExpress(options) {\n  return (request, response, next) => {\n    // Skip if there are no uploads\n    if (!request.is('multipart/form-data')) return next()\n    processRequest(request, options).then(body => {\n      request.body = body\n      next()\n    })\n  }\n}\n"],"names":["processRequest","request","uploadDir","mkdirp","sync","form","formidable","IncomingForm","Promise","resolve","reject","parse","error","operations","files","Error","JSON","Object","keys","length","operationsPath","objectPath","forEach","variablesPath","name","type","size","path","set","apolloUploadKoa","options","ctx","next","is","body","req","apolloUploadExpress","response","then"],"mappings":";;;;;;;;;;;;AAAA,AAIO,SAASA,cAAT,CAAwBC,OAAxB,EAAiC,EAAEC,SAAF,KAAgB,EAAjD,EAAqD;;MAEtDA,SAAJ,EAAeC,OAAOC,IAAP,CAAYF,SAAZ;;QAETG,OAAOC,WAAWC,YAAX,CAAwB;;;GAAxB,CAAb;;;SAMO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;SACjCC,KAAL,CAAWV,OAAX,EAAoB,CAACW,KAAD,EAAQ,EAAEC,UAAF,EAAR,EAAwBC,KAAxB,KAAkC;UAChDF,KAAJ,EAAWF,OAAO,IAAIK,KAAJ,CAAUH,KAAV,CAAP;;;;mBAIEI,KAAKL,KAAL,CAAWE,UAAX,CAAb;;;UAGII,OAAOC,IAAP,CAAYJ,KAAZ,EAAmBK,MAAvB,EAA+B;;;;cAIvBC,iBAAiBC,WAAWR,UAAX,CAAvB;eACOK,IAAP,CAAYJ,KAAZ,EAAmBQ,OAAnB,CAA2BC,iBAAiB;qCACPT,MAAMS,aAAN,CADO;gBAClCC,IADkC,wBAClCA,IADkC;gBAC5BC,IAD4B,wBAC5BA,IAD4B;gBACtBC,IADsB,wBACtBA,IADsB;gBAChBC,IADgB,wBAChBA,IADgB;;yBAE3BC,GAAf,CAAmBL,aAAnB,EAAkC,EAAEC,IAAF,EAAQC,IAAR,EAAcC,IAAd,EAAoBC,IAApB,EAAlC;SAFF;;;;cAOMd,UAAR;KApBF;GADK,CAAP;;;AA0BF,AAAO,SAASgB,eAAT,CAAyBC,OAAzB,EAAkC;;iCAChC,WAAeC,GAAf,EAAoBC,IAApB,EAA0B;;UAE3BD,IAAI9B,OAAJ,CAAYgC,EAAZ,CAAe,qBAAf,CAAJ,EACEF,IAAI9B,OAAJ,CAAYiC,IAAZ,GAAmB,MAAMlC,eAAe+B,IAAII,GAAnB,EAAwBL,OAAxB,CAAzB;YACIE,MAAN;KAJF;;;;;;;;AAQF,AAAO,SAASI,mBAAT,CAA6BN,OAA7B,EAAsC;SACpC,CAAC7B,OAAD,EAAUoC,QAAV,EAAoBL,IAApB,KAA6B;;QAE9B,CAAC/B,QAAQgC,EAAR,CAAW,qBAAX,CAAL,EAAwC,OAAOD,MAAP;mBACzB/B,OAAf,EAAwB6B,OAAxB,EAAiCQ,IAAjC,CAAsCJ,QAAQ;cACpCA,IAAR,GAAeA,IAAf;;KADF;GAHF;;;;;;;"}